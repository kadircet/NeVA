syntax = "proto3";

import "protos/user.proto";
import "protos/suggestion.proto";
import "protos/user_history.proto";

package neva.backend;

service Backend {
  rpc Register(RegisterRequest) returns (GenericReply) {
  }

  rpc Login(LoginRequest) returns (LoginReply) {
  }

  rpc UpdateUser(UpdateUserRequest) returns (GenericReply) {
  }

  rpc SuggestionItemProposition(SuggestionItemPropositionRequest)
      returns (GenericReply) {
  }

  rpc GetSuggestion(GetSuggestionRequest) returns (GetSuggestionReply) {
  }

  rpc TagProposition(TagPropositionRequest) returns (GenericReply) {
  }

  rpc TagValueProposition(TagValuePropositionRequest) returns (GenericReply) {
  }

  rpc GetSuggestionItemList(GetSuggestionItemListRequest)
      returns (GetSuggestionItemListReply) {
  }

  rpc InformUserChoice(InformUserChoiceRequest)
      returns (InformUserChoiceReply) {
  }

  rpc FetchUserHistory(FetchUserHistoryRequest)
      returns (FetchUserHistoryReply) {
  }
}

message GenericReply {
}

message RegisterRequest {
  User user = 1;
}

message LoginRequest {
  enum AuthenticationType {
    INVALID = 0;
    DEFAULT = 1;
    FACEBOOK = 2;
  };

  string email = 1;
  string password = 2;
  AuthenticationType authentication_type = 3;
}

message LoginReply {
  // Authentication token to be used in upcoming requests.
  bytes token = 1;
}

message UpdateUserRequestÂ {
  // Session key for the user sending request
  bytes token = 1;

  // Updated user data
  User user = 1;
}

message SuggestionItemPropositionRequest {
  // Session key for the user proposing the item.
  bytes token = 1;

  // Holds information on propositions category and name.
  Suggestion suggestion = 2;
}

message GetSuggestionRequest {
  // Session key for the user requesting a suggestion.
  bytes token = 1;

  // Category for which the user requests a suggestion.
  Suggestion.SuggestionCategory suggestion_category = 2;
}

message GetSuggestionReply {
  // Name of the suggested item.
  string name = 1;
}

message TagPropositionRequest {
  // Session key for the user proposing the tag.
  bytes token = 1;

  // Holds name for proposed tag.
  string tag = 2;
}

message TagValuePropositionRequest {
  // Session key for the user proposing the tag.
  bytes token = 1;

  // Holds id of the tag.
  uint32 tag_id = 2;

  // Holds id of the suggestion item.
  uint32 suggestee_id = 3;

  // Holds value for the tag if appropriate.
  string value = 4;
}

message GetSuggestionItemListRequest {
  // Session key for the user requesting item list.
  bytes token = 1;

  // Category for which the user requesting items.
  Suggestion.SuggestionCategory suggestion_category = 2;

  // Start index to fetch items.
  uint32 start_index = 3;
}

message GetSuggestionItemListReply {
  // Item names in the database.
  repeated Suggestion items = 1;
}

message InformUserChoiceRequest {
  // Session key for the user informing about request.
  bytes token = 1;

  // Choice of the user.
  Choice choice = 2;
}

message InformUserChoiceReply {
  // Database id of the user choice.
  uint32 choice_id = 1;
}

message FetchUserHistoryRequest {
  // Session key for the user requesting the fetch.
  bytes token = 1;

  // Start index to fetch choice entries;
  uint32 start_index = 2;
}

message FetchUserHistoryReply {
  // User history object.
  UserHistory user_history = 1;
}

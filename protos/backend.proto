syntax = "proto3";

import "protos/user.proto";
import "protos/suggestion.proto";
import "protos/user_history.proto";

package neva.backend;

service Backend {
  rpc Register(RegisterRequest) returns (GenericReply) {
  }

  rpc Login(LoginRequest) returns (LoginReply) {
  }

  rpc UpdateUser(UpdateUserRequest) returns (GenericReply) {
  }

  rpc GetUser(GetUserRequest) returns (GetUserReply) {
  }

  rpc SuggestionItemProposition(SuggestionItemPropositionRequest)
      returns (GenericReply) {
  }

  rpc GetMultipleSuggestions(GetMultipleSuggestionsRequest)
      returns (GetMultipleSuggestionsReply) {
  }

  rpc TagProposition(TagPropositionRequest) returns (GenericReply) {
  }

  rpc TagValueProposition(TagValuePropositionRequest) returns (GenericReply) {
  }

  rpc GetSuggestionItemList(GetSuggestionItemListRequest)
      returns (GetSuggestionItemListReply) {
  }

  rpc InformUserChoice(InformUserChoiceRequest)
      returns (InformUserChoiceReply) {
  }

  rpc FetchUserHistory(FetchUserHistoryRequest)
      returns (FetchUserHistoryReply) {
  }

  rpc CheckToken(CheckTokenRequest) returns (GenericReply) {
  }

  rpc RecordFeedback(RecordFeedbackRequest) returns (GenericReply) {
  }

  // Returns all tags in the database.
  rpc GetTags(GetTagsRequest) returns (GetTagsReply) {
  }

  // Returns cold start completion status for the user.
  rpc GetColdStartCompletionStatus(GetColdStartCompletionStatusRequest)
      returns (GetColdStartCompletionStatusReply) {
  }

  // Returns SuggestionList for cold start
  rpc GetColdStartItemList(GetColdStartItemListRequest)
      returns (GetColdStartItemListReply) {
  }

  // Inform user choice for cold start
  rpc RecordColdStartChoice(RecordColdStartChoiceRequest)
      returns (GenericReply) {
  }
}

message GenericReply {
}

message RegisterRequest {
  User user = 1;
}

message LoginRequest {
  enum AuthenticationType {
    INVALID = 0;
    DEFAULT = 1;
    FACEBOOK = 2;
  };

  string email = 1;
  string password = 2;
  AuthenticationType authentication_type = 3;
}

message LoginReply {
  // Authentication token to be used in upcoming requests.
  bytes token = 1;
}

message UpdateUserRequest {
  // Session key for the user sending request.
  bytes token = 1;

  // Updated user data.
  User user = 2;
}

message GetUserRequest {
  // Session key for the user sending request.
  bytes token = 1;
}

message GetUserReply {
  // User data of the requested user.
  User user = 1;
}

message SuggestionItemPropositionRequest {
  // Session key for the user proposing the item.
  bytes token = 1;

  // Holds information on propositions category and name.
  Suggestion suggestion = 2;
}

message GetMultipleSuggestionsRequest {
  // Session key for the user requesting a suggestion.
  bytes token = 1;

  // Category for which the user requests a suggestion.
  Suggestion.SuggestionCategory suggestion_category = 2;
}

message GetMultipleSuggestionsReply {
  // List of suggested items.
  SuggestionList suggestion = 1;
}

message TagPropositionRequest {
  // Session key for the user proposing the tag.
  bytes token = 1;

  // Holds name for proposed tag.
  string tag = 2;
}

message TagValuePropositionRequest {
  // Session key for the user proposing the tag.
  bytes token = 1;

  // Holds id of the tag.
  uint32 tag_id = 2;

  // Holds id of the suggestion item.
  uint32 suggestee_id = 3;

  // Holds value for the tag if appropriate.
  string value = 4;
}

message GetSuggestionItemListRequest {
  // Session key for the user requesting item list.
  bytes token = 1;

  // Category for which the user requesting items.
  Suggestion.SuggestionCategory suggestion_category = 2;

  // Fetch elements updated after that index. Giving zero as start_index would
  // result in fetching all items.
  uint32 start_index = 3;
}

message GetSuggestionItemListReply {
  // Item names in the database.
  SuggestionList items = 1;

  // Current version of the database.
  uint32 last_updated = 2;
}

message InformUserChoiceRequest {
  // Session key for the user informing about request.
  bytes token = 1;

  // Choice of the user.
  Choice choice = 2;
}

message InformUserChoiceReply {
  // Database id of the user choice.
  uint32 choice_id = 1;
}

message FetchUserHistoryRequest {
  // Session key for the user requesting the fetch.
  bytes token = 1;

  // Start index to fetch choice entries;
  uint32 start_index = 2;
}

message FetchUserHistoryReply {
  // User history object.
  UserHistory user_history = 1;
}

message CheckTokenRequest {
  // Session token to be checked.
  bytes token = 1;
}

message RecordFeedbackRequest {
  // Session token of the user sending the feedback.
  bytes token = 1;

  // Information about the feedback.
  UserFeedback user_feedback = 2;
}

message GetTagsRequest {
  // Token of the user making request.
  bytes token = 1;

  // Start index to fetch tags. start_index is exclusive.
  uint32 start_index = 2;
}

message GetTagsReply {
  // Tags in the database both id and names.
  repeated Tag tag_list = 1;
}

message GetColdStartCompletionStatusRequest {
  // Token of the user making request.
  bytes token = 1;
}

message GetColdStartCompletionStatusReply {
  bool completion_status = 1;
}

message GetColdStartItemListRequest {
  // Token of the user making request.
  bytes token = 1;
  // Category for which the user requests GetColdStartItemList.
  Suggestion.SuggestionCategory coldstart_item_category = 2;
}

message GetColdStartItemListReply {
  // List of cold start items.
  SuggestionList coldstart_item_list = 1;
}

message RecordColdStartChoiceRequest {
  // Token of the user making request.
  bytes token = 1;
  // Cold Start item
  Suggestion coldstart_item = 2;
  // Feedback for coldstart_item
  UserFeedback.Feedback feedback = 3;
}

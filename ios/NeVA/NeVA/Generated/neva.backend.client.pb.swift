/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: protos/backend.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

/// Type for errors thrown from generated client code.
internal enum Neva_Backend_BackendClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// Register (Unary)
internal class Neva_Backend_BackendRegisterCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/Register")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_RegisterRequest,
                       metadata: Metadata) throws -> Neva_Backend_GenericReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GenericReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_RegisterRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws -> Neva_Backend_BackendRegisterCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GenericReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Login (Unary)
internal class Neva_Backend_BackendLoginCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/Login")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_LoginRequest,
                       metadata: Metadata) throws -> Neva_Backend_LoginReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_LoginReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_LoginRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_LoginReply?, CallResult)->())
    throws -> Neva_Backend_BackendLoginCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_LoginReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// UpdateUser (Unary)
internal class Neva_Backend_BackendUpdateUserCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/UpdateUser")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_UpdateUserRequest,
                       metadata: Metadata) throws -> Neva_Backend_GenericReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GenericReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_UpdateUserRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws -> Neva_Backend_BackendUpdateUserCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GenericReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// GetUser (Unary)
internal class Neva_Backend_BackendGetUserCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/GetUser")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_GetUserRequest,
                       metadata: Metadata) throws -> Neva_Backend_GetUserReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GetUserReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_GetUserRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GetUserReply?, CallResult)->())
    throws -> Neva_Backend_BackendGetUserCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GetUserReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// SuggestionItemProposition (Unary)
internal class Neva_Backend_BackendSuggestionItemPropositionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/SuggestionItemProposition")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_SuggestionItemPropositionRequest,
                       metadata: Metadata) throws -> Neva_Backend_GenericReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GenericReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_SuggestionItemPropositionRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws -> Neva_Backend_BackendSuggestionItemPropositionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GenericReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// GetSuggestion (Unary)
internal class Neva_Backend_BackendGetSuggestionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/GetSuggestion")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_GetSuggestionRequest,
                       metadata: Metadata) throws -> Neva_Backend_GetSuggestionReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GetSuggestionReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_GetSuggestionRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GetSuggestionReply?, CallResult)->())
    throws -> Neva_Backend_BackendGetSuggestionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GetSuggestionReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// TagProposition (Unary)
internal class Neva_Backend_BackendTagPropositionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/TagProposition")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_TagPropositionRequest,
                       metadata: Metadata) throws -> Neva_Backend_GenericReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GenericReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_TagPropositionRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws -> Neva_Backend_BackendTagPropositionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GenericReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// TagValueProposition (Unary)
internal class Neva_Backend_BackendTagValuePropositionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/TagValueProposition")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_TagValuePropositionRequest,
                       metadata: Metadata) throws -> Neva_Backend_GenericReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GenericReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_TagValuePropositionRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws -> Neva_Backend_BackendTagValuePropositionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GenericReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// GetSuggestionItemList (Unary)
internal class Neva_Backend_BackendGetSuggestionItemListCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/GetSuggestionItemList")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_GetSuggestionItemListRequest,
                       metadata: Metadata) throws -> Neva_Backend_GetSuggestionItemListReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GetSuggestionItemListReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_GetSuggestionItemListRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GetSuggestionItemListReply?, CallResult)->())
    throws -> Neva_Backend_BackendGetSuggestionItemListCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GetSuggestionItemListReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// InformUserChoice (Unary)
internal class Neva_Backend_BackendInformUserChoiceCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/InformUserChoice")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_InformUserChoiceRequest,
                       metadata: Metadata) throws -> Neva_Backend_InformUserChoiceReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_InformUserChoiceReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_InformUserChoiceRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_InformUserChoiceReply?, CallResult)->())
    throws -> Neva_Backend_BackendInformUserChoiceCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_InformUserChoiceReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// FetchUserHistory (Unary)
internal class Neva_Backend_BackendFetchUserHistoryCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/FetchUserHistory")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_FetchUserHistoryRequest,
                       metadata: Metadata) throws -> Neva_Backend_FetchUserHistoryReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_FetchUserHistoryReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_FetchUserHistoryRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_FetchUserHistoryReply?, CallResult)->())
    throws -> Neva_Backend_BackendFetchUserHistoryCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_FetchUserHistoryReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// CheckToken (Unary)
internal class Neva_Backend_BackendCheckTokenCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/CheckToken")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_CheckTokenRequest,
                       metadata: Metadata) throws -> Neva_Backend_GenericReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GenericReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_CheckTokenRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws -> Neva_Backend_BackendCheckTokenCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GenericReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// RecordFeedback (Unary)
internal class Neva_Backend_BackendRecordFeedbackCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/RecordFeedback")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_RecordFeedbackRequest,
                       metadata: Metadata) throws -> Neva_Backend_GenericReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GenericReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_RecordFeedbackRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws -> Neva_Backend_BackendRecordFeedbackCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GenericReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// GetTags (Unary)
internal class Neva_Backend_BackendGetTagsCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/neva.backend.Backend/GetTags")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Neva_Backend_GetTagsRequest,
                       metadata: Metadata) throws -> Neva_Backend_GetTagsReply {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Neva_Backend_GetTagsReply?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Neva_Backend_BackendClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Neva_Backend_GetTagsRequest,
                         metadata: Metadata,
                         completion: @escaping (Neva_Backend_GetTagsReply?, CallResult)->())
    throws -> Neva_Backend_BackendGetTagsCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Neva_Backend_GetTagsReply(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Call methods of this class to make API calls.
internal class Neva_Backend_BackendService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client.
  internal init(address: String, secure: Bool = true) {
    gRPC.initialize()
    channel = Channel(address:address, secure:secure)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections with a custom certificate and (optional) hostname.
  internal init(address: String, certificates: String, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func register(_ request: Neva_Backend_RegisterRequest)
    throws
    -> Neva_Backend_GenericReply {
      return try Neva_Backend_BackendRegisterCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func register(_ request: Neva_Backend_RegisterRequest,
                  completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendRegisterCall {
      return try Neva_Backend_BackendRegisterCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func login(_ request: Neva_Backend_LoginRequest)
    throws
    -> Neva_Backend_LoginReply {
      return try Neva_Backend_BackendLoginCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func login(_ request: Neva_Backend_LoginRequest,
                  completion: @escaping (Neva_Backend_LoginReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendLoginCall {
      return try Neva_Backend_BackendLoginCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func updateuser(_ request: Neva_Backend_UpdateUserRequest)
    throws
    -> Neva_Backend_GenericReply {
      return try Neva_Backend_BackendUpdateUserCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func updateuser(_ request: Neva_Backend_UpdateUserRequest,
                  completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendUpdateUserCall {
      return try Neva_Backend_BackendUpdateUserCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func getuser(_ request: Neva_Backend_GetUserRequest)
    throws
    -> Neva_Backend_GetUserReply {
      return try Neva_Backend_BackendGetUserCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func getuser(_ request: Neva_Backend_GetUserRequest,
                  completion: @escaping (Neva_Backend_GetUserReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendGetUserCall {
      return try Neva_Backend_BackendGetUserCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func suggestionitemproposition(_ request: Neva_Backend_SuggestionItemPropositionRequest)
    throws
    -> Neva_Backend_GenericReply {
      return try Neva_Backend_BackendSuggestionItemPropositionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func suggestionitemproposition(_ request: Neva_Backend_SuggestionItemPropositionRequest,
                  completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendSuggestionItemPropositionCall {
      return try Neva_Backend_BackendSuggestionItemPropositionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func getsuggestion(_ request: Neva_Backend_GetSuggestionRequest)
    throws
    -> Neva_Backend_GetSuggestionReply {
      return try Neva_Backend_BackendGetSuggestionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func getsuggestion(_ request: Neva_Backend_GetSuggestionRequest,
                  completion: @escaping (Neva_Backend_GetSuggestionReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendGetSuggestionCall {
      return try Neva_Backend_BackendGetSuggestionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func tagproposition(_ request: Neva_Backend_TagPropositionRequest)
    throws
    -> Neva_Backend_GenericReply {
      return try Neva_Backend_BackendTagPropositionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func tagproposition(_ request: Neva_Backend_TagPropositionRequest,
                  completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendTagPropositionCall {
      return try Neva_Backend_BackendTagPropositionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func tagvalueproposition(_ request: Neva_Backend_TagValuePropositionRequest)
    throws
    -> Neva_Backend_GenericReply {
      return try Neva_Backend_BackendTagValuePropositionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func tagvalueproposition(_ request: Neva_Backend_TagValuePropositionRequest,
                  completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendTagValuePropositionCall {
      return try Neva_Backend_BackendTagValuePropositionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func getsuggestionitemlist(_ request: Neva_Backend_GetSuggestionItemListRequest)
    throws
    -> Neva_Backend_GetSuggestionItemListReply {
      return try Neva_Backend_BackendGetSuggestionItemListCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func getsuggestionitemlist(_ request: Neva_Backend_GetSuggestionItemListRequest,
                  completion: @escaping (Neva_Backend_GetSuggestionItemListReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendGetSuggestionItemListCall {
      return try Neva_Backend_BackendGetSuggestionItemListCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func informuserchoice(_ request: Neva_Backend_InformUserChoiceRequest)
    throws
    -> Neva_Backend_InformUserChoiceReply {
      return try Neva_Backend_BackendInformUserChoiceCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func informuserchoice(_ request: Neva_Backend_InformUserChoiceRequest,
                  completion: @escaping (Neva_Backend_InformUserChoiceReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendInformUserChoiceCall {
      return try Neva_Backend_BackendInformUserChoiceCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func fetchuserhistory(_ request: Neva_Backend_FetchUserHistoryRequest)
    throws
    -> Neva_Backend_FetchUserHistoryReply {
      return try Neva_Backend_BackendFetchUserHistoryCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func fetchuserhistory(_ request: Neva_Backend_FetchUserHistoryRequest,
                  completion: @escaping (Neva_Backend_FetchUserHistoryReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendFetchUserHistoryCall {
      return try Neva_Backend_BackendFetchUserHistoryCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func checktoken(_ request: Neva_Backend_CheckTokenRequest)
    throws
    -> Neva_Backend_GenericReply {
      return try Neva_Backend_BackendCheckTokenCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func checktoken(_ request: Neva_Backend_CheckTokenRequest,
                  completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendCheckTokenCall {
      return try Neva_Backend_BackendCheckTokenCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func recordfeedback(_ request: Neva_Backend_RecordFeedbackRequest)
    throws
    -> Neva_Backend_GenericReply {
      return try Neva_Backend_BackendRecordFeedbackCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func recordfeedback(_ request: Neva_Backend_RecordFeedbackRequest,
                  completion: @escaping (Neva_Backend_GenericReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendRecordFeedbackCall {
      return try Neva_Backend_BackendRecordFeedbackCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func gettags(_ request: Neva_Backend_GetTagsRequest)
    throws
    -> Neva_Backend_GetTagsReply {
      return try Neva_Backend_BackendGetTagsCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func gettags(_ request: Neva_Backend_GetTagsRequest,
                  completion: @escaping (Neva_Backend_GetTagsReply?, CallResult)->())
    throws
    -> Neva_Backend_BackendGetTagsCall {
      return try Neva_Backend_BackendGetTagsCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}

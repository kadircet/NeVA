/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: protos/backend.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

/// Type for errors thrown from generated server code.
internal enum Neva_Backend_BackendServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Neva_Backend_BackendProvider {
  func register(request : Neva_Backend_RegisterRequest, session : Neva_Backend_BackendRegisterSession) throws -> Neva_Backend_GenericReply
  func login(request : Neva_Backend_LoginRequest, session : Neva_Backend_BackendLoginSession) throws -> Neva_Backend_LoginReply
  func updateuser(request : Neva_Backend_UpdateUserRequest, session : Neva_Backend_BackendUpdateUserSession) throws -> Neva_Backend_GenericReply
  func getuser(request : Neva_Backend_GetUserRequest, session : Neva_Backend_BackendGetUserSession) throws -> Neva_Backend_GetUserReply
  func suggestionitemproposition(request : Neva_Backend_SuggestionItemPropositionRequest, session : Neva_Backend_BackendSuggestionItemPropositionSession) throws -> Neva_Backend_GenericReply
  func getsuggestion(request : Neva_Backend_GetSuggestionRequest, session : Neva_Backend_BackendGetSuggestionSession) throws -> Neva_Backend_GetSuggestionReply
  func getmultiplesuggestions(request : Neva_Backend_GetMultipleSuggestionsRequest, session : Neva_Backend_BackendGetMultipleSuggestionsSession) throws -> Neva_Backend_GetMultipleSuggestionsReply
  func tagproposition(request : Neva_Backend_TagPropositionRequest, session : Neva_Backend_BackendTagPropositionSession) throws -> Neva_Backend_GenericReply
  func tagvalueproposition(request : Neva_Backend_TagValuePropositionRequest, session : Neva_Backend_BackendTagValuePropositionSession) throws -> Neva_Backend_GenericReply
  func getsuggestionitemlist(request : Neva_Backend_GetSuggestionItemListRequest, session : Neva_Backend_BackendGetSuggestionItemListSession) throws -> Neva_Backend_GetSuggestionItemListReply
  func informuserchoice(request : Neva_Backend_InformUserChoiceRequest, session : Neva_Backend_BackendInformUserChoiceSession) throws -> Neva_Backend_InformUserChoiceReply
  func fetchuserhistory(request : Neva_Backend_FetchUserHistoryRequest, session : Neva_Backend_BackendFetchUserHistorySession) throws -> Neva_Backend_FetchUserHistoryReply
  func checktoken(request : Neva_Backend_CheckTokenRequest, session : Neva_Backend_BackendCheckTokenSession) throws -> Neva_Backend_GenericReply
  func recordfeedback(request : Neva_Backend_RecordFeedbackRequest, session : Neva_Backend_BackendRecordFeedbackSession) throws -> Neva_Backend_GenericReply
  func gettags(request : Neva_Backend_GetTagsRequest, session : Neva_Backend_BackendGetTagsSession) throws -> Neva_Backend_GetTagsReply
}

/// Common properties available in each service session.
internal class Neva_Backend_BackendSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// Register (Unary)
internal class Neva_Backend_BackendRegisterSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_RegisterRequest(serializedData:requestData)
        let replyMessage = try self.provider.register(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// Login (Unary)
internal class Neva_Backend_BackendLoginSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_LoginRequest(serializedData:requestData)
        let replyMessage = try self.provider.login(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// UpdateUser (Unary)
internal class Neva_Backend_BackendUpdateUserSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_UpdateUserRequest(serializedData:requestData)
        let replyMessage = try self.provider.updateuser(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetUser (Unary)
internal class Neva_Backend_BackendGetUserSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_GetUserRequest(serializedData:requestData)
        let replyMessage = try self.provider.getuser(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// SuggestionItemProposition (Unary)
internal class Neva_Backend_BackendSuggestionItemPropositionSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_SuggestionItemPropositionRequest(serializedData:requestData)
        let replyMessage = try self.provider.suggestionitemproposition(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetSuggestion (Unary)
internal class Neva_Backend_BackendGetSuggestionSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_GetSuggestionRequest(serializedData:requestData)
        let replyMessage = try self.provider.getsuggestion(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetMultipleSuggestions (Unary)
internal class Neva_Backend_BackendGetMultipleSuggestionsSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_GetMultipleSuggestionsRequest(serializedData:requestData)
        let replyMessage = try self.provider.getmultiplesuggestions(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// TagProposition (Unary)
internal class Neva_Backend_BackendTagPropositionSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_TagPropositionRequest(serializedData:requestData)
        let replyMessage = try self.provider.tagproposition(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// TagValueProposition (Unary)
internal class Neva_Backend_BackendTagValuePropositionSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_TagValuePropositionRequest(serializedData:requestData)
        let replyMessage = try self.provider.tagvalueproposition(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetSuggestionItemList (Unary)
internal class Neva_Backend_BackendGetSuggestionItemListSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_GetSuggestionItemListRequest(serializedData:requestData)
        let replyMessage = try self.provider.getsuggestionitemlist(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// InformUserChoice (Unary)
internal class Neva_Backend_BackendInformUserChoiceSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_InformUserChoiceRequest(serializedData:requestData)
        let replyMessage = try self.provider.informuserchoice(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// FetchUserHistory (Unary)
internal class Neva_Backend_BackendFetchUserHistorySession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_FetchUserHistoryRequest(serializedData:requestData)
        let replyMessage = try self.provider.fetchuserhistory(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// CheckToken (Unary)
internal class Neva_Backend_BackendCheckTokenSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_CheckTokenRequest(serializedData:requestData)
        let replyMessage = try self.provider.checktoken(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// RecordFeedback (Unary)
internal class Neva_Backend_BackendRecordFeedbackSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_RecordFeedbackRequest(serializedData:requestData)
        let replyMessage = try self.provider.recordfeedback(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// GetTags (Unary)
internal class Neva_Backend_BackendGetTagsSession : Neva_Backend_BackendSession {
  private var provider : Neva_Backend_BackendProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Neva_Backend_BackendProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Neva_Backend_GetTagsRequest(serializedData:requestData)
        let replyMessage = try self.provider.gettags(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}


/// Main server for generated service
internal class Neva_Backend_BackendServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Neva_Backend_BackendProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Neva_Backend_BackendProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Neva_Backend_BackendProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      fatalError() // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/neva.backend.Backend/Register":
          try Neva_Backend_BackendRegisterSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/Login":
          try Neva_Backend_BackendLoginSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/UpdateUser":
          try Neva_Backend_BackendUpdateUserSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/GetUser":
          try Neva_Backend_BackendGetUserSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/SuggestionItemProposition":
          try Neva_Backend_BackendSuggestionItemPropositionSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/GetSuggestion":
          try Neva_Backend_BackendGetSuggestionSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/GetMultipleSuggestions":
          try Neva_Backend_BackendGetMultipleSuggestionsSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/TagProposition":
          try Neva_Backend_BackendTagPropositionSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/TagValueProposition":
          try Neva_Backend_BackendTagValuePropositionSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/GetSuggestionItemList":
          try Neva_Backend_BackendGetSuggestionItemListSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/InformUserChoice":
          try Neva_Backend_BackendInformUserChoiceSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/FetchUserHistory":
          try Neva_Backend_BackendFetchUserHistorySession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/CheckToken":
          try Neva_Backend_BackendCheckTokenSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/RecordFeedback":
          try Neva_Backend_BackendRecordFeedbackSession(handler:handler, provider:provider).run(queue:queue)
        case "/neva.backend.Backend/GetTags":
          try Neva_Backend_BackendGetTagsSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

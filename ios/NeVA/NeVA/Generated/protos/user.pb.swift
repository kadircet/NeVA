// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/user.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neva_Backend_LinkedAccount: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LinkedAccount"

  var token: String = String()

  var socialMediaType: Neva_Backend_LinkedAccount.SocialMediaType = .invalidSocialMediaType

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SocialMediaType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalidSocialMediaType // = 0
    case facebook // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .invalidSocialMediaType
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalidSocialMediaType
      case 1: self = .facebook
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalidSocialMediaType: return 0
      case .facebook: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.token)
      case 2: try decoder.decodeSingularEnumField(value: &self.socialMediaType)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if self.socialMediaType != .invalidSocialMediaType {
      try visitor.visitSingularEnumField(value: self.socialMediaType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Neva_Backend_User: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".User"

  var userID: UInt32 {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var dateOfBirth: Neva_Backend_Util_Timestamp {
    get {return _storage._dateOfBirth ?? Neva_Backend_Util_Timestamp()}
    set {_uniqueStorage()._dateOfBirth = newValue}
  }
  /// Returns true if `dateOfBirth` has been explicitly set.
  var hasDateOfBirth: Bool {return _storage._dateOfBirth != nil}
  /// Clears the value of `dateOfBirth`. Subsequent reads from it will return its default value.
  mutating func clearDateOfBirth() {_storage._dateOfBirth = nil}

  var gender: Neva_Backend_User.Gender {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  var weight: Float {
    get {return _storage._weight}
    set {_uniqueStorage()._weight = newValue}
  }

  /// Keeps url to the photo of the user.
  var photo: String {
    get {return _storage._photo}
    set {_uniqueStorage()._photo = newValue}
  }

  var status: Neva_Backend_User.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var registerDate: Neva_Backend_Util_Timestamp {
    get {return _storage._registerDate ?? Neva_Backend_Util_Timestamp()}
    set {_uniqueStorage()._registerDate = newValue}
  }
  /// Returns true if `registerDate` has been explicitly set.
  var hasRegisterDate: Bool {return _storage._registerDate != nil}
  /// Clears the value of `registerDate`. Subsequent reads from it will return its default value.
  mutating func clearRegisterDate() {_storage._registerDate = nil}

  var linkedAccounts: [Neva_Backend_LinkedAccount] {
    get {return _storage._linkedAccounts}
    set {_uniqueStorage()._linkedAccounts = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Gender: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalidGender // = 0
    case male // = 1
    case female // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .invalidGender
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalidGender
      case 1: self = .male
      case 2: self = .female
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalidGender: return 0
      case .male: return 1
      case .female: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalidStatus // = 0
    case inactive // = 1
    case active // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .invalidStatus
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalidStatus
      case 1: self = .inactive
      case 2: self = .active
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalidStatus: return 0
      case .inactive: return 1
      case .active: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._userID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._email)
        case 3: try decoder.decodeSingularStringField(value: &_storage._password)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._dateOfBirth)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._gender)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._weight)
        case 8: try decoder.decodeSingularStringField(value: &_storage._photo)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._registerDate)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._linkedAccounts)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._userID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._userID, fieldNumber: 1)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 2)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if let v = _storage._dateOfBirth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._gender != .invalidGender {
        try visitor.visitSingularEnumField(value: _storage._gender, fieldNumber: 6)
      }
      if _storage._weight != 0 {
        try visitor.visitSingularFloatField(value: _storage._weight, fieldNumber: 7)
      }
      if !_storage._photo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._photo, fieldNumber: 8)
      }
      if _storage._status != .invalidStatus {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 9)
      }
      if let v = _storage._registerDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._linkedAccounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._linkedAccounts, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neva.backend"

extension Neva_Backend_LinkedAccount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .standard(proto: "social_media_type"),
  ]

  func _protobuf_generated_isEqualTo(other: Neva_Backend_LinkedAccount) -> Bool {
    if self.token != other.token {return false}
    if self.socialMediaType != other.socialMediaType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Neva_Backend_LinkedAccount.SocialMediaType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID_SOCIAL_MEDIA_TYPE"),
    1: .same(proto: "FACEBOOK"),
  ]
}

extension Neva_Backend_User: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "email"),
    3: .same(proto: "password"),
    4: .same(proto: "name"),
    5: .standard(proto: "date_of_birth"),
    6: .same(proto: "gender"),
    7: .same(proto: "weight"),
    8: .same(proto: "photo"),
    9: .same(proto: "status"),
    10: .standard(proto: "register_date"),
    11: .standard(proto: "linked_accounts"),
  ]

  fileprivate class _StorageClass {
    var _userID: UInt32 = 0
    var _email: String = String()
    var _password: String = String()
    var _name: String = String()
    var _dateOfBirth: Neva_Backend_Util_Timestamp? = nil
    var _gender: Neva_Backend_User.Gender = .invalidGender
    var _weight: Float = 0
    var _photo: String = String()
    var _status: Neva_Backend_User.Status = .invalidStatus
    var _registerDate: Neva_Backend_Util_Timestamp? = nil
    var _linkedAccounts: [Neva_Backend_LinkedAccount] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _email = source._email
      _password = source._password
      _name = source._name
      _dateOfBirth = source._dateOfBirth
      _gender = source._gender
      _weight = source._weight
      _photo = source._photo
      _status = source._status
      _registerDate = source._registerDate
      _linkedAccounts = source._linkedAccounts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Neva_Backend_User) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._userID != other_storage._userID {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._password != other_storage._password {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._dateOfBirth != other_storage._dateOfBirth {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._weight != other_storage._weight {return false}
        if _storage._photo != other_storage._photo {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._registerDate != other_storage._registerDate {return false}
        if _storage._linkedAccounts != other_storage._linkedAccounts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Neva_Backend_User.Gender: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID_GENDER"),
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
  ]
}

extension Neva_Backend_User.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID_STATUS"),
    1: .same(proto: "INACTIVE"),
    2: .same(proto: "ACTIVE"),
  ]
}

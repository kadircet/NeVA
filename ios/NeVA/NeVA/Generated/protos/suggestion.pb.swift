// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/suggestion.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neva_Backend_Suggestion: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Suggestion"

  /// Shows the category to which suggestion belongs.
  var suggestionCategory: Neva_Backend_Suggestion.SuggestionCategory = .invalidSuggestionCategory

  /// id of the suggestee in the database.
  var suggesteeID: UInt32 = 0

  /// Name of the suggestion item, like "lahmacun".
  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SuggestionCategory: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalidSuggestionCategory // = 0
    case meal // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .invalidSuggestionCategory
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalidSuggestionCategory
      case 1: self = .meal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalidSuggestionCategory: return 0
      case .meal: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.suggestionCategory)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.suggesteeID)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.suggestionCategory != .invalidSuggestionCategory {
      try visitor.visitSingularEnumField(value: self.suggestionCategory, fieldNumber: 1)
    }
    if self.suggesteeID != 0 {
      try visitor.visitSingularUInt32Field(value: self.suggesteeID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neva.backend"

extension Neva_Backend_Suggestion: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "suggestion_category"),
    2: .standard(proto: "suggestee_id"),
    3: .same(proto: "name"),
  ]

  func _protobuf_generated_isEqualTo(other: Neva_Backend_Suggestion) -> Bool {
    if self.suggestionCategory != other.suggestionCategory {return false}
    if self.suggesteeID != other.suggesteeID {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Neva_Backend_Suggestion.SuggestionCategory: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID_SUGGESTION_CATEGORY"),
    1: .same(proto: "MEAL"),
  ]
}

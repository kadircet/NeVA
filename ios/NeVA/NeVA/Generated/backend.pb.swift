// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: backend.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Backend_Timestamp: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Timestamp"

  var seconds: Int64 = 0

  var nanos: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.seconds)
      case 2: try decoder.decodeSingularInt32Field(value: &self.nanos)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seconds != 0 {
      try visitor.visitSingularInt64Field(value: self.seconds, fieldNumber: 1)
    }
    if self.nanos != 0 {
      try visitor.visitSingularInt32Field(value: self.nanos, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Backend_RegisterRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RegisterRequest"

  var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var dateOfBirth: Backend_Timestamp {
    get {return _storage._dateOfBirth ?? Backend_Timestamp()}
    set {_uniqueStorage()._dateOfBirth = newValue}
  }
  /// Returns true if `dateOfBirth` has been explicitly set.
  var hasDateOfBirth: Bool {return _storage._dateOfBirth != nil}
  /// Clears the value of `dateOfBirth`. Subsequent reads from it will return its default value.
  mutating func clearDateOfBirth() {_storage._dateOfBirth = nil}

  var gender: Backend_RegisterRequest.Gender {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  var weight: Float {
    get {return _storage._weight}
    set {_uniqueStorage()._weight = newValue}
  }

  /// Keeps url to the photo of the user.
  var photo: String {
    get {return _storage._photo}
    set {_uniqueStorage()._photo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Gender: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalid // = 0
    case male // = 1
    case female // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .invalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .male
      case 2: self = .female
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .male: return 1
      case .female: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._email)
        case 2: try decoder.decodeSingularStringField(value: &_storage._password)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._dateOfBirth)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._gender)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._weight)
        case 7: try decoder.decodeSingularStringField(value: &_storage._photo)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 1)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if let v = _storage._dateOfBirth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._gender != .invalid {
        try visitor.visitSingularEnumField(value: _storage._gender, fieldNumber: 5)
      }
      if _storage._weight != 0 {
        try visitor.visitSingularFloatField(value: _storage._weight, fieldNumber: 6)
      }
      if !_storage._photo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._photo, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Backend_RegisterReply: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RegisterReply"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Backend_LoginRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LoginRequest"

  var email: String = String()

  var password: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.email)
      case 2: try decoder.decodeSingularStringField(value: &self.password)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Backend_LoginReply: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LoginReply"

  /// Authentication token to be used in upcoming requests.
  var token: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "backend"

extension Backend_Timestamp: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seconds"),
    2: .same(proto: "nanos"),
  ]

  func _protobuf_generated_isEqualTo(other: Backend_Timestamp) -> Bool {
    if self.seconds != other.seconds {return false}
    if self.nanos != other.nanos {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Backend_RegisterRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "password"),
    3: .same(proto: "name"),
    4: .standard(proto: "date_of_birth"),
    5: .same(proto: "gender"),
    6: .same(proto: "weight"),
    7: .same(proto: "photo"),
  ]

  fileprivate class _StorageClass {
    var _email: String = String()
    var _password: String = String()
    var _name: String = String()
    var _dateOfBirth: Backend_Timestamp? = nil
    var _gender: Backend_RegisterRequest.Gender = .invalid
    var _weight: Float = 0
    var _photo: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _email = source._email
      _password = source._password
      _name = source._name
      _dateOfBirth = source._dateOfBirth
      _gender = source._gender
      _weight = source._weight
      _photo = source._photo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Backend_RegisterRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._email != other_storage._email {return false}
        if _storage._password != other_storage._password {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._dateOfBirth != other_storage._dateOfBirth {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._weight != other_storage._weight {return false}
        if _storage._photo != other_storage._photo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Backend_RegisterRequest.Gender: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID"),
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
  ]
}

extension Backend_RegisterReply: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Backend_RegisterReply) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Backend_LoginRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "password"),
  ]

  func _protobuf_generated_isEqualTo(other: Backend_LoginRequest) -> Bool {
    if self.email != other.email {return false}
    if self.password != other.password {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Backend_LoginReply: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  func _protobuf_generated_isEqualTo(other: Backend_LoginReply) -> Bool {
    if self.token != other.token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
